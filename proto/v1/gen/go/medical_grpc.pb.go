// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: medical.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MedicalService_UserGet_FullMethodName     = "/v1.MedicalService/UserGet"
	MedicalService_ProtocolGet_FullMethodName = "/v1.MedicalService/ProtocolGet"
)

// MedicalServiceClient is the client API for MedicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicalServiceClient interface {
	// Sends a greeting
	UserGet(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserGetReply, error)
	// Sends a greeting
	ProtocolGet(ctx context.Context, in *ProtocolGetRequest, opts ...grpc.CallOption) (*ProtocolGetReply, error)
}

type medicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalServiceClient(cc grpc.ClientConnInterface) MedicalServiceClient {
	return &medicalServiceClient{cc}
}

func (c *medicalServiceClient) UserGet(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserGetReply, error) {
	out := new(UserGetReply)
	err := c.cc.Invoke(ctx, MedicalService_UserGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalServiceClient) ProtocolGet(ctx context.Context, in *ProtocolGetRequest, opts ...grpc.CallOption) (*ProtocolGetReply, error) {
	out := new(ProtocolGetReply)
	err := c.cc.Invoke(ctx, MedicalService_ProtocolGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalServiceServer is the server API for MedicalService service.
// All implementations must embed UnimplementedMedicalServiceServer
// for forward compatibility
type MedicalServiceServer interface {
	// Sends a greeting
	UserGet(context.Context, *UserGetRequest) (*UserGetReply, error)
	// Sends a greeting
	ProtocolGet(context.Context, *ProtocolGetRequest) (*ProtocolGetReply, error)
	mustEmbedUnimplementedMedicalServiceServer()
}

// UnimplementedMedicalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMedicalServiceServer struct {
}

func (UnimplementedMedicalServiceServer) UserGet(context.Context, *UserGetRequest) (*UserGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedMedicalServiceServer) ProtocolGet(context.Context, *ProtocolGetRequest) (*ProtocolGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolGet not implemented")
}
func (UnimplementedMedicalServiceServer) mustEmbedUnimplementedMedicalServiceServer() {}

// UnsafeMedicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalServiceServer will
// result in compilation errors.
type UnsafeMedicalServiceServer interface {
	mustEmbedUnimplementedMedicalServiceServer()
}

func RegisterMedicalServiceServer(s grpc.ServiceRegistrar, srv MedicalServiceServer) {
	s.RegisterService(&MedicalService_ServiceDesc, srv)
}

func _MedicalService_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_UserGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).UserGet(ctx, req.(*UserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalService_ProtocolGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalServiceServer).ProtocolGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalService_ProtocolGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalServiceServer).ProtocolGet(ctx, req.(*ProtocolGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalService_ServiceDesc is the grpc.ServiceDesc for MedicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MedicalService",
	HandlerType: (*MedicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserGet",
			Handler:    _MedicalService_UserGet_Handler,
		},
		{
			MethodName: "ProtocolGet",
			Handler:    _MedicalService_ProtocolGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medical.proto",
}
